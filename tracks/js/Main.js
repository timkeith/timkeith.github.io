// Generated by CoffeeScript 1.10.0
var $, Main, PropTypes, React, ReactDOM, ShowDir, ShowTrack, _, a, button, classFactory, div, expect, extend, form, group, h1, h2, hr, http, input, main, ref, ref1, section, span, table, tbody, td, th, tr, util, withKeys;

_ = require('underscore');

$ = require('jquery');

React = require('react');

PropTypes = React.PropTypes;

ReactDOM = require('react-dom');

http = require('http');

expect = require('chai').expect;

util = require('./util');

ref = require('./lib/ReactDOM'), a = ref.a, table = ref.table, tbody = ref.tbody, tr = ref.tr, th = ref.th, td = ref.td, section = ref.section, button = ref.button, div = ref.div, form = ref.form, h1 = ref.h1, h2 = ref.h2, input = ref.input, span = ref.span, hr = ref.hr;

ref1 = require('./lib/ReactUtils'), classFactory = ref1.classFactory, withKeys = ref1.withKeys, group = ref1.group;

extend = function(obj, key, value) {
  var kv;
  kv = {};
  kv[key] = value;
  return _.extend(obj, kv);
};

main = function() {
  return ReactDOM.render(Main({
    selectedDir: location.hash.replace(/^#/, '')
  }), document.getElementById('main-content'));
};

Main = classFactory({
  displayName: 'Main',
  propTypes: {
    selectedDir: PropTypes.string
  },
  getInitialState: function() {
    return {
      dirInfos: [],
      selectedDir: this.props.selectedDir
    };
  },
  componentDidMount: function() {
    return $.ajax({
      url: util.getUrl('main.json'),
      type: 'GET',
      success: (function(_this) {
        return function(data) {
          console.log('data:', data);
          return _this.setState({
            dirInfos: data
          });
        };
      })(this),
      error: function(error) {
        return console.log('ERROR: get request failed:', error);
      }
    });
  },
  selectDir: function(dir) {
    if (dir === this.state.selectedDir) {
      this.setState({
        selectedDir: ''
      });
      return location.hash = '';
    } else {
      this.setState({
        selectedDir: dir
      });
      return location.hash = "#" + dir;
    }
  },
  render: function() {
    var info;
    return div({}, (function() {
      var i, len, ref2, results;
      ref2 = this.state.dirInfos;
      results = [];
      for (i = 0, len = ref2.length; i < len; i++) {
        info = ref2[i];
        results.push(ShowDir({
          key: info.dir,
          dir: info.dir,
          name: info.name,
          tracks: info.data,
          selectDir: this.selectDir,
          isSelected: this.state.selectedDir === info.dir
        }));
      }
      return results;
    }).call(this));
  }
});

ShowDir = classFactory({
  displayName: 'ShowDir',
  propTypes: {
    dir: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired,
    tracks: PropTypes.arrayOf(PropTypes.object).isRequired,
    selectDir: PropTypes.func.isRequired,
    isSelected: PropTypes.bool.isRequired
  },
  getInitialState: function() {
    return {
      selectedTracks: {}
    };
  },
  selectTrack: function(path, track) {
    return this.setState({
      selectedTracks: extend(this.state.selectedTracks, path, track)
    });
  },
  selectDir: function(e) {
    e.preventDefault();
    return this.props.selectDir(this.props.dir);
  },
  getSelectedTracksRow: function() {
    var key, num, selected, tracks, value;
    selected = this.state.selectedTracks;
    tracks = _.sortBy((function() {
      var results;
      results = [];
      for (key in selected) {
        value = selected[key];
        if (value != null) {
          results.push(key);
        }
      }
      return results;
    })(), function(x) {
      return selected[x].date;
    });
    tracks.reverse();
    num = tracks.length;
    return tr({
      "class": 'map'
    }, td({
      colspan: '3'
    }, a({
      disabled: num === 0,
      target: '_blank',
      href: util.getUrl("map.html?" + (tracks.join('&')))
    }, 'Map'), " - " + num + " selected track" + (num !== 1 ? 's' : '')));
  },
  showTrack: function(track) {
    return ShowTrack({
      dir: this.props.dir,
      track: track,
      selectTrack: this.selectTrack
    });
  },
  render: function() {
    var rows, track;
    rows = [
      tr({
        "class": 'head'
      }, td({
        colspan: 3
      }, a({
        href: "#" + this.props.dir,
        onClick: this.selectDir
      }, this.props.name)))
    ];
    if (this.props.isSelected) {
      rows.push((function() {
        var i, len, ref2, results;
        ref2 = this.props.tracks;
        results = [];
        for (i = 0, len = ref2.length; i < len; i++) {
          track = ref2[i];
          results.push(ShowTrack({
            dir: this.props.dir,
            track: track,
            selectTrack: this.selectTrack
          }));
        }
        return results;
      }).call(this));
      rows.push(this.getSelectedTracksRow());
    }
    return table({}, tbody({}, withKeys(rows)));
  }
});

ShowTrack = classFactory({
  displayName: 'ShowTrack',
  propTypes: {
    dir: PropTypes.string.isRequired,
    track: PropTypes.object.isRequired,
    selectTrack: PropTypes.func.isRequired
  },
  getInitialState: function() {
    return {
      info: {},
      path: this.props.track.path.replace(/(.*)\.json$/, '/$1')
    };
  },
  checkEvent: function(e) {
    return this.props.selectTrack(this.state.path, e.target.checked ? this.props.track : void 0);
  },
  getDateString: function() {
    return new Date(this.props.track.date).toDateString().replace(/^\w\w\w (\w\w\w) 0?(\d+) (\d\d\d\d)$/, '$1 $2, $3');
  },
  render: function() {
    var url;
    url = util.getUrl("map.html?" + this.state.path);
    return tr({}, td({
      "class": 'indent'
    }, input({
      type: 'checkbox',
      onChange: this.checkEvent
    })), td(this.getDateString()), td({}, a({
      href: url,
      target: '_blank'
    }, this.props.track.name)));
  }
});

if (window.tsk == null) {
  window.tsk = {};
}

window.tsk.Maps = {
  main: main
};

// Generated by CoffeeScript 1.10.0
var $, COLORS, CallbackCounter, MapWrapper, _, createMapFromSearchString, scaleLuminance, util;

_ = require('underscore');

$ = require('jquery');

CallbackCounter = require('./CallbackCounter');

util = require('./util');

createMapFromSearchString = function(elemId, search) {
  var color, i, j, len, map, path, paths;
  paths = search.replace(/^\?/, '').split('&');
  console.log('paths:', paths);
  map = new MapWrapper(document.getElementById(elemId));
  for (i = j = 0, len = paths.length; j < len; i = ++j) {
    path = paths[i];
    color = COLORS[i];
    map.getAndAddPath(color, util.getUrl(path + ".json"));
  }
  return map.done();
};

scaleLuminance = function(hex, scale) {
  var c, match, x;
  match = hex.match(/^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i);
  if (match == null) {
    throw new Error("Bad RGB hex string: " + hex);
  }
  return '#' + ((function() {
    var j, len, ref, results;
    ref = match.slice(1, 4);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      c = ref[j];
      x = Math.round(parseInt(c, 16) * scale);
      x = Math.min(255, Math.max(0, x));
      results.push((x < 16 ? '0' : '') + x.toString(16));
    }
    return results;
  })()).join('');
};

COLORS = ['#FFB300', '#803E75', '#C10020', '#007D34', '#F6768E', '#00538A', '#FF7A5C', '#53377A', '#FF8E00', '#B32851', '#F4C800', '#7F180D', '#93AA00', '#593315', '#F13A13', '#232C16', '#817066', '#FF6800', '#CEA262'];

MapWrapper = (function() {
  function MapWrapper(elem) {
    this.map = new google.maps.Map(elem, {
      mapTypeId: google.maps.MapTypeId.TERRAIN
    });
    this.infowindow = new google.maps.InfoWindow();
    this.ne = {
      lng: -180,
      lat: -90
    };
    this.sw = {
      lng: 180,
      lat: 90
    };
    this.legend = [];
    this.info = '';
    this.counter = new CallbackCounter(1, (function(_this) {
      return function() {
        return _this._finish();
      };
    })(this));
  }

  MapWrapper.prototype.getBounds = function() {
    return {
      ne: this.ne,
      sw: this.sw
    };
  };

  MapWrapper.prototype.done = function() {
    return this.counter.decr();
  };

  MapWrapper.prototype._finish = function() {
    var t, title, tracks;
    document.title = this.legend[0].name;
    this.map.fitBounds(new google.maps.LatLngBounds(this.sw, this.ne));
    title = this.legend.length === 1 ? "<div id='title'>" + this.info + "</div>" : (tracks = _.sortBy(this.legend, function(x) {
      return x.date;
    }), tracks.reverse(), title = ((function() {
      var j, len, results;
      results = [];
      for (j = 0, len = tracks.length; j < len; j++) {
        t = tracks[j];
        results.push("<tr>\n  <td><span class='hline' style='background-color: " + t.color + "'></span></td>\n  <td>" + t.Date + "</td>\n  <td>&ndash; " + t.name + "</td>\n</tr>");
      }
      return results;
    })()).join(''), "<table id='title'>" + title + "</table>");
    return this.map.controls[google.maps.ControlPosition.TOP_CENTER].push($(title)[0]);
  };

  MapWrapper.prototype._titleHtml = function() {
    var t, tracks;
    if (this.legend.length === 1) {
      return "<div id='title'>" + this.info + "</div>";
    } else {
      tracks = _.sortBy(this.legend, function(x) {
        return x.date;
      });
      tracks.reverse();
      return "<table id='title'>" + (((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = tracks.length; j < len; j++) {
          t = tracks[j];
          results.push("<tr> <td><span class='hline' style='background-color: " + t.color + "'></span></td> <td>" + t.Date + "</td> <td>&ndash; " + t.name + "</td> </tr>");
        }
        return results;
      })()).join('')) + "</table>";
    }
  };

  MapWrapper.prototype.getAndAddPath = function(color, url) {
    this.counter.incr();
    return $.ajax({
      url: url,
      type: 'GET',
      success: (function(_this) {
        return function(data) {
          return _this.addPath(color, data);
        };
      })(this),
      error: function(error) {
        return console.log('error', error);
      }
    });
  };

  MapWrapper.prototype.addPath = function(color, data) {
    var end, j, lat, len, lng, path, point, polyline, start;
    this.legend.push({
      name: data.name,
      date: data.date,
      Date: data.Date,
      color: color
    });
    path = data.coords;
    if ((path == null) || path.length === 0) {
      console.log('bad data:', data);
      return;
    }
    if (data.omit) {
      path.length -= data.omit;
    }
    start = path[0];
    end = path[path.length - 1];
    this.info = "<h2>" + data.name + "</h2>\n" + data.Date + "<br>\nDistance: " + data.Distance + "<br>\nAltitude: " + data['Min Altitude'] + " - " + data['Max Altitude'];
    this.addMarker(end, 'End', this.info);
    this.addMarker(start, 'Start', this.info);
    polyline = new google.maps.Polyline({
      path: path,
      geodesic: true,
      strokeColor: color,
      strokeOpacity: 1.0,
      strokeWeight: 3
    });
    polyline.setMap(this.map);
    for (j = 0, len = path.length; j < len; j++) {
      point = path[j];
      lat = point.lat, lng = point.lng;
      if (lat < this.sw.lat) {
        this.sw.lat = lat;
      }
      if (lat > this.ne.lat) {
        this.ne.lat = lat;
      }
      if (lng < this.sw.lng) {
        this.sw.lng = lng;
      }
      if (lng > this.ne.lng) {
        this.ne.lng = lng;
      }
    }
    return this.counter.decr();
  };

  MapWrapper.prototype.addMarker = function(position, title, content) {
    var marker;
    marker = new google.maps.Marker({
      map: this.map,
      position: position,
      title: title
    });
    return google.maps.event.addListener(marker, 'click', (function(_this) {
      return function() {
        _this.infowindow.close();
        _this.infowindow.setContent(content);
        return _this.infowindow.open(_this.map, marker);
      };
    })(this));
  };

  return MapWrapper;

})();

if (window.tsk == null) {
  window.tsk = {};
}

window.tsk.MapWrapper = MapWrapper;

window.tsk.createMapFromSearchString = createMapFromSearchString;
